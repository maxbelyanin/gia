zabbix_export:
  version: '6.0'
  date: '2022-06-15T01:36:12Z'
  groups:
    -
      uuid: 45c5f38a92f84f30ade6904d35f2da71
      name: Templates/GIA
  templates:
    -
      uuid: 18d83fc228904100ad154b17f46d83db
      template: AVS
      name: AVS
      groups:
        -
          name: Templates/GIA
      items:
        -
          uuid: cda95614579446af9b924bfe76efdf79
          name: 'Emit Config'
          type: HTTP_AGENT
          key: avs.config.emit
          trends: '0'
          value_type: TEXT
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - '$.[?(@.PPECode==''{$GIA_PPE_CODE}'')]'
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // GET INVOLVED DATES
                  var scheduler = JSON.parse(value);
                  
                  var involved_dates = {};
                  
                  for (var i in scheduler) {
                      var dat = scheduler[i]["Date"];
                      var aud = scheduler[i]["AudienceCode"];
                      if (!involved_dates.hasOwnProperty(dat)) { involved_dates[dat] = {"0000": [1,0], "7777": [1, 0]}; }
                      involved_dates[dat][aud] = [Number(scheduler[i]["Online"]), Number(scheduler[i]["OVZ"])];
                  }
                  
                  return JSON.stringify(involved_dates)
                  
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // GET INVOLVED AUDS
                  var involved_dates = JSON.parse(value);
                  
                  var involved_auds = {};
                  
                  for (var curr_date in involved_dates) {
                      for (var curr_aud in involved_dates[curr_date]) {
                          if (!involved_auds.hasOwnProperty(curr_aud)) involved_auds[curr_aud] = {}
                          involved_auds[curr_aud][curr_date] = [curr_date.replace(/(\d{4})-(\d{2})-(\d{2})/, "$3-$2-$1")].concat(involved_dates[curr_date][curr_aud]);
                      }
                  }
                  
                  return JSON.stringify({
                      "involved_dates": involved_dates,
                      "involved_auds": involved_auds
                  })
                  
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // GET CAM LIST
                  var result = JSON.parse(value);
                  
                  var request = new HttpRequest();
                  var response = request.get("{$AVS_URL_MONITORING_SYS}");
                  var response_obj = JSON.parse(response)
                  
                  result["cam_list"] = response_obj.cam_list;
                  result["ppe_code"] = response_obj.name;
                  
                  return JSON.stringify(result);
                  
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // AVS CONFIG; UNUSED STREAMS; MISSING AUDS
                  var src = JSON.parse(value);
                  
                  var ppe_config = {
                      "involved_dates": src.involved_dates,
                      "unused_streams": [],
                      "missing_auds": [],
                      "streams": {}
                  };
                  
                  var missing_auds_dict = {};
                  for (var a in src.involved_auds) missing_auds_dict[a]="";
                  
                  for (var stream_id in src.cam_list) {
                      var curr_aud_code = src.cam_list[stream_id]["name"].substr(2,4)
                      if (src.involved_auds.hasOwnProperty(curr_aud_code)) {
                          delete missing_auds_dict[curr_aud_code];
                          
                          ppe_config.streams[stream_id] = {
                              "aud_code":     curr_aud_code,
                              "exam_dates":   JSON.parse(JSON.stringify(src.involved_auds[curr_aud_code])),
                              "avs_name":     src.cam_list[stream_id]["name"],
                              "id":           Number(stream_id.substr(5)),
                              "zbx_id":       src.ppe_code + "_" + curr_aud_code + "_" + src.cam_list[stream_id]["name"].substr(7,1) + "_" + stream_id.substr(5),
                              "comment":      src.cam_list[stream_id]["comment"],
                              "cam_url":      src.cam_list[stream_id]["playUrl"]
                          }
                      } else {
                          ppe_config.unused_streams.push(stream_id)
                      }
                  }
                  
                  for (var k in missing_auds_dict) ppe_config.missing_auds.push(k)
                  
                  return JSON.stringify(ppe_config)
                  
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // CURRENT EXAM DATE; NEXT EXAM DATE
                  var ppe_config = JSON.parse(value);
                  
                  function formatDate(date) {
                    return date.getFullYear() + "-" + ("00" + (date.getMonth() + 1)).substr(-2) + "-" + ("00" + date.getDate()).substr(-2)
                  }
                  
                  function formatDateDY(date) {
                    return ("00" + date.getDate()).substr(-2) + "-"  + ("00" + (date.getMonth() + 1)).substr(-2) + "-" + date.getFullYear()
                  }
                  
                  var exam_date_list = []
                  
                  for (var date in ppe_config.involved_dates) {
                    exam_date_list.push(date)
                  }
                  
                  exam_date_list.sort()
                  
                  //var now = new Date("2022-06-07" + "T09:00:00.000+03:00")
                  var now = new Date()
                  
                  var exam_date = {
                    days_next: -1,
                    date_next: "",
                    date_exam: []
                  }
                  
                  for (var i in exam_date_list) {
                    var curr_exam_date = new Date(exam_date_list[i] + "T00:00:00.000+03:00")
                    var curr_date_diff = now.getTime() - curr_exam_date.getTime()
                  
                    if (curr_date_diff < 0) {
                      exam_date["days_next"] = (Math.abs(curr_date_diff) - (Math.abs(curr_date_diff) % 86400000)) / 86400000 + 1;
                      exam_date["date_next"] = formatDate(curr_exam_date);
                      break;
                    } else if (curr_date_diff < 86400000) {
                      exam_date["date_exam"][0] = formatDate(curr_exam_date);
                      exam_date["date_exam"][1] = formatDateDY(curr_exam_date);
                    }
                  }
                  
                  ppe_config["exam_date"] = exam_date;
                  
                  return JSON.stringify(ppe_config);
                  
          timeout: 5s
          url: '{$GIA_SCHEDULER_URL}'
          tags:
            -
              tag: avs
              value: config
            -
              tag: test
        -
          uuid: b2ebb33207ab4bdcb5cf4e6b2545f6f6
          name: 'Check AVS Monitoring RTSP'
          type: HTTP_AGENT
          key: avs.monitoring.rtsp
          trends: '0'
          value_type: TEXT
          authtype: BASIC
          username: '{$AVS_SYSTEM_USER_NAME}'
          password: '{$AVS_SYSTEM_USER_PASS}'
          url: '{$AVS_URL_MONITORING_RTSP}'
          tags:
            -
              tag: software
              value: avs
          triggers:
            -
              uuid: 0f3a4770f8514f3cb27fadebb7c98994
              expression: change(/AVS/avs.monitoring.rtsp)=0
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: change(/AVS/avs.monitoring.rtsp)=1
              name: 'Static Response: {$AVS_URL_MONITORING_RTSP}'
              priority: DISASTER
              dependencies:
                -
                  name: 'Unresponsible: {$AVS_URL_MONITORING_RTSP}'
                  expression: 'nodata(/AVS/avs.monitoring.rtsp,2m)=1'
                  recovery_expression: 'nodata(/AVS/avs.monitoring.rtsp,1m)=0'
            -
              uuid: f21b0596623747aabec892dfaadae1db
              expression: 'nodata(/AVS/avs.monitoring.rtsp,2m)=1'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: 'nodata(/AVS/avs.monitoring.rtsp,1m)=0'
              name: 'Unresponsible: {$AVS_URL_MONITORING_RTSP}'
              priority: DISASTER
        -
          uuid: 47dbf82c51f4421dbeb75ce03349b393
          name: 'Check AVS Monitoring RTSP. Results'
          type: DEPENDENT
          key: avs.monitoring.rtsp.results
          delay: '0'
          history: 1d
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  var x = JSON.parse(value).results;
                  var result = new Object({})
                    
                  for (var i in x) {
                    if(x[i]["online"]) {
                      c = i.substr(0,4) + "_" + x[i]["title"].substr(2,4) + "_" + x[i]["title"].substr(7) + "_" + i.substr(5)
                      result[c] = {
                        code:         c,
                        id:           i,
                        name:         x[i].title,
                        comment:      x[i].comment,
                        creationTime: new Date(x[i].creationTimestamp).toLocaleString(),
                        upTime:       x[i].upTime,
                        appname:      x[i].appname,
                        ip:           x[i].ip,
                        type:         x[i].type,
                        audio:        x[i].audio,
                        video:        x[i].video,
                        pullSettings: x[i].pullSettings
                      }
                    }
                  }
                    
                  return JSON.stringify(result)
          master_item:
            key: avs.monitoring.rtsp
          tags:
            -
              tag: avs
              value: monitoring
            -
              tag: software
              value: avs
        -
          uuid: 82c6cebd1809432da80a802c04d70e05
          name: 'Check AVS Monitoring Sys'
          type: HTTP_AGENT
          key: avs.monitoring.sys
          trends: '0'
          value_type: TEXT
          authtype: BASIC
          username: '{$AVS_SYSTEM_USER_NAME}'
          password: '{$AVS_SYSTEM_USER_PASS}'
          url: '{$AVS_URL_MONITORING_SYS}'
          tags:
            -
              tag: software
              value: avs
          triggers:
            -
              uuid: 1dbf0d5051f54878abd13d6aa3211d9e
              expression: 'nodata(/AVS/avs.monitoring.sys,2m)=1'
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: 'nodata(/AVS/avs.monitoring.sys,1m)=0'
              name: 'Unresponsible: {$AVS_URL_MONITORING_SYS}'
              priority: DISASTER
        -
          uuid: 7e1709426358420394ad651415eab5c7
          name: 'Check AVS Monitoring Sys. AVS Version'
          type: DEPENDENT
          key: avs.monitoring.sys.avsVersion
          delay: '0'
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.avsVersion
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: 8ee6739ff9c747f0909ddc864e7cf7cb
          name: 'Check AVS Monitoring Sys. Cams. All'
          type: DEPENDENT
          key: avs.monitoring.sys.cams.cam_all
          delay: '0'
          status: DISABLED
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.cams.cam_all
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: 16e2b49076944dd79e6bf4fc73d4a1a3
          name: 'Check AVS Monitoring Sys. Cams. Proxy. Off'
          type: DEPENDENT
          key: avs.monitoring.sys.cams.cam_proxy_off
          delay: '0'
          status: DISABLED
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.cams.cam_proxy_off
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: 5616c7f58e0342cbb3f4ceec92319d51
          name: 'Check AVS Monitoring Sys. Cams. Proxy. On'
          type: DEPENDENT
          key: avs.monitoring.sys.cams.cam_proxy_on
          delay: '0'
          status: DISABLED
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.cams.cam_proxy_on
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: 387f4496c15341b29d46f876445dd7d2
          name: 'Check AVS Monitoring Sys. Cams. Proxy. Waiting'
          type: DEPENDENT
          key: avs.monitoring.sys.cams.cam_proxy_waiting
          delay: '0'
          status: DISABLED
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.cams.cam_proxy_waiting
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: d29f8e27ef33425aa38aee9d2de97a25
          name: 'Check AVS Monitoring Sys. Cams. Rec. Off'
          type: DEPENDENT
          key: avs.monitoring.sys.cams.cam_rec_off
          delay: '0'
          status: DISABLED
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.cams.cam_rec_off
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: 9a35b9b3f2be45b7a01a2b886e9e59d5
          name: 'Check AVS Monitoring Sys. Cams. Rec. On'
          type: DEPENDENT
          key: avs.monitoring.sys.cams.cam_rec_on
          delay: '0'
          status: DISABLED
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.cams.cam_rec_on
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: 330aa23dc50c4cecbb0d5b6a96de075f
          name: 'Check AVS Monitoring Sys. Cams. Rec. Waiting'
          type: DEPENDENT
          key: avs.monitoring.sys.cams.cam_rec_waiting
          delay: '0'
          status: DISABLED
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.cams.cam_rec_waiting
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: 0bff38a38e59437caa426cbf341ed8bd
          name: 'Check AVS Monitoring Sys. Cam List'
          type: DEPENDENT
          key: avs.monitoring.sys.cam_dist
          delay: '0'
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  var x = JSON.parse(value).cam_list;
                  var result = new Object({})
                    
                  for (var i in x) {
                    c = i.substr(0,4) + "_" + x[i]["name"].substr(2,4) + "_" + x[i]["name"].substr(7) + "_" + i.substr(5)
                    result[c] = {
                      code:      c,
                      id:        i,
                      name:      x[i].name,
                      comment:   x[i].comment,
                      remoteUrl: x[i].remoteUrl,
                      playUrl:   x[i].playUrl,
                      pull:     (x[i].pull == "") ? "{$AVS_STREAM_STATUS_OFF}" : x[i].pull,
                      push:     (x[i].push == "") ? "{$AVS_STREAM_STATUS_OFF}" : x[i].push,
                      rec:      (x[i].rec  == "") ? "{$AVS_STREAM_STATUS_OFF}" : x[i].rec,
                    }
                  }
                    
                  return JSON.stringify(result)
                  
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: avs
              value: monitoring
            -
              tag: software
              value: avs
        -
          uuid: 1fa549a49da747a4a8643ac2e6a02bdf
          name: 'Check AVS Monitoring Sys. Free Space'
          type: DEPENDENT
          key: avs.monitoring.sys.freeSpace
          delay: '0'
          status: DISABLED
          units: B
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.freeSpace
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: f2ee6ba932254730b0b1755b799bde90
          name: 'Check AVS Monitoring Sys. Name'
          type: DEPENDENT
          key: avs.monitoring.sys.name
          delay: '0'
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.name
          master_item:
            key: avs.monitoring.sys
          tags:
            -
              tag: software
              value: avs
        -
          uuid: 344b968c518c4cb9b3b3420205bfce74
          name: 'Get Involved Auditoriums Today'
          type: DEPENDENT
          key: gia.get.involved_auds.today
          delay: '0'
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // Get involved cam list today
                  var v = JSON.parse(value)
                  var d = new Date()
                  //var s = d.getFullYear() + "-" + ("00" + (d.getMonth() + 1)).substr(-2) + "-" + ("00" + d.getDate()).substr(-2)
                  var s = "2022-06-01"
                  var result = {
                    "data": {
                      "{\$GIA_INVOLVED_AUDS_TODAY}": {
                        "value": "[]"
                      },
                      "{\$GIA_INVOLVED_EXAM_TODAY}": {
                        "value": "NO"
                      }
                    }
                  }
                  if (v.hasOwnProperty(s)) {
                    result["data"]["{\$GIA_INVOLVED_AUDS_TODAY}"]["value"] = JSON.stringify(v[s])
                    result["data"]["{\$GIA_INVOLVED_EXAM_TODAY}"]["value"] = "YES"
                  }
                  return JSON.stringify(result)
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // ZBX API ASSIGN USER MACRO VALUES
                  
                  // ===========================================================================
                  // GET TARGET USER HOST MACRO ID LIST
                  var result = JSON.parse(value);
                  
                  var macroname_list = []
                  for (var i in result.data) macroname_list.push(i)
                  
                  var request = new HttpRequest();
                  request.addHeader("Content-Type: application/json-rpc");
                  var data = {
                      "jsonrpc":"2.0",
                      "method":"usermacro.get",
                      "params":{
                          "output":["hostmacroid", "macro"],
                          "hostids":"{$HOST_ID}",
                          "filter": {
                              "macro": macroname_list
                          }
                      },
                      "auth":"{$GIA_ZABBIX_API_TOKEN}","id":1
                  }
                  var response = request.post("{$GIA_ZABBIX_API_URL}", JSON.stringify(data));
                  
                  if (200 != request.getStatus() || JSON.parse(response).hasOwnProperty("error")) {
                      result["err"] = {
                          "reqv": "usermacro.get",
                          "resp": JSON.parse(response)
                      }
                      return JSON.stringify(result);
                  } else {
                      var r = JSON.parse(response)["result"]
                      for (var i in r) {
                          result["data"][r[i]["macro"]]["hostmacroid"] = r[i]["hostmacroid"]
                      }
                  }
                  
                  // ===========================================================================
                  // UPDATE TARGET USER HOST MACRO LIST
                  for (var i in result["data"]) {
                      var request = new HttpRequest();
                      request.addHeader("Content-Type: application/json-rpc");
                      var data = {
                          "jsonrpc":"2.0",
                          "method":"usermacro.update",
                          "params": result["data"][i],
                          "auth":"{$GIA_ZABBIX_API_TOKEN}","id":1
                      }
                  
                      var response = request.post("{$GIA_ZABBIX_API_URL}", JSON.stringify(data));
                      if (200 != request.getStatus() || JSON.parse(response).hasOwnProperty("error")) {
                          if(!result.hasOwnProperty("err")) {
                              result["err"] = {
                                  "reqv": "usermacro.update",
                                  "resp": {}
                              }
                          }
                          result["err"]["resp"][i] = (response != "") ? JSON.parse(response) : response
                      }
                  }
                  return JSON.stringify(result)
                  
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // RETURN ITEM VALUE
                  result = JSON.parse(value);
                  
                  if(result.hasOwnProperty("err")) {
                   return JSON.stringify(result);
                  }
                  
                  return result["data"]["{\$GIA_INVOLVED_AUDS_TODAY}"]["value"]
          master_item:
            key: gia.get.involved_exam_days
          tags:
            -
              tag: gia
              value: scheduler
        -
          uuid: 9a637738609049e89eb6781b5d3735e4
          name: 'Get Involved Auditoriums Tomorrow'
          type: DEPENDENT
          key: gia.get.involved_auds.tomorrow
          delay: '0'
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // Get involved cam list tomorrow
                  var v = JSON.parse(value)
                  var d = new Date(new Date().getTime() + 86400000)
                  var s = d.getFullYear() + "-" + ("00" + (d.getMonth() + 1)).substr(-2) + "-" + ("00" + d.getDate()).substr(-2)
                  var result = {
                    "data": {
                      "{\$GIA_INVOLVED_AUDS_TOMORROW}": {
                        "value": "[]"
                      },
                      "{\$GIA_INVOLVED_EXAM_TOMORROW}": {
                        "value": "NO"
                      }
                    }
                  }
                  if (v.hasOwnProperty(s)) {
                    result["data"]["{\$GIA_INVOLVED_AUDS_TOMORROW}"]["value"] = JSON.stringify(v[s])
                    result["data"]["{\$GIA_INVOLVED_EXAM_TOMORROW}"]["value"] = "YES"
                  }
                  return JSON.stringify(result)
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // ZABBIX API: GET HOST MACRO
                  var result = JSON.parse(value);
                  var request = new HttpRequest();
                  request.addHeader("Content-Type: application/json-rpc");
                  var data = {
                      "jsonrpc":"2.0",
                      "method":"usermacro.get",
                      "params":{
                          "output":["hostmacroid", "macro"],
                          "hostids":"{$HOST_ID}",
                          "filter": {
                              "macro": [
                                  "{\$GIA_INVOLVED_AUDS_TOMORROW}",
                                  "{\$GIA_INVOLVED_EXAM_TOMORROW}"
                              ]
                          }
                      },
                      "auth":"{$GIA_ZABBIX_API_TOKEN}","id":1
                  }
                  var response = request.post("{$GIA_ZABBIX_API_URL}", JSON.stringify(data));
                  
                  if (200 != request.getStatus()) {
                    result["err"] = JSON.stringify(response);
                  } else {
                    var r = JSON.parse(response)["result"]
                    for (var i in r) {
                      result["data"][r[i]["macro"]]["hostmacroid"] = r[i]["hostmacroid"]
                    }
                  }
                  
                  return JSON.stringify(result);
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // ZABBIX API: UPDATE HOST MACRO
                  result = JSON.parse(value);
                  if(result.hasOwnProperty("err")) {
                   return JSON.stringify(result);
                  }
                  
                  for (var i in result["data"]) {
                    var request = new HttpRequest();
                    request.addHeader("Content-Type: application/json-rpc");
                    var data = {
                      "jsonrpc":"2.0",
                      "method":"usermacro.update",
                      "params": result["data"][i],
                      "auth":"{$GIA_ZABBIX_API_TOKEN}","id":1
                    }
                  
                    var response = request.post("{$GIA_ZABBIX_API_URL}", JSON.stringify(data));
                  
                    if (200 != request.getStatus()) {
                      result["err"] = JSON.stringify(response);
                      return result;
                    }
                  }
                  result = result["data"]["{\$GIA_INVOLVED_AUDS_TOMORROW}"]["value"]
                  return result
          master_item:
            key: gia.get.involved_exam_days
          tags:
            -
              tag: gia
              value: scheduler
        -
          uuid: e1b433b7af0c4dca9390ac713ccef6a3
          name: 'Get Involved Auditoriums Total'
          type: DEPENDENT
          key: gia.get.involved_auds.total
          delay: '0'
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - '$.[?(@.PPECode==''{$GIA_PPE_CODE}'')]'
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // Create Total involved aud list
                  v = JSON.parse(value)
                  var s = ["0000", "7777"]
                  for (var i in v) {
                    if(s.indexOf(v[i]["AudienceCode"]) >= 0) continue;  
                    s.push(v[i]["AudienceCode"])
                  }
                  
                  var result = {
                    "value": JSON.stringify(s.sort())
                  }
                  return JSON.stringify(result)
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // ZABBIX API: GET HOST MACRO
                  var result = JSON.parse(value);
                  var request = new HttpRequest();
                  request.addHeader("Content-Type: application/json-rpc");
                  var data = {
                      "jsonrpc":"2.0",
                      "method":"usermacro.get",
                      "params":{
                          "output":["hostmacroid", "macro"],
                          "hostids":"{$HOST_ID}",
                          "filter": {
                              "macro": [
                                  "{\$GIA_INVOLVED_AUDS_TOTAL}"
                              ]
                          }
                      },
                      "auth":"{$GIA_ZABBIX_API_TOKEN}","id":1
                  }
                  var response = request.post("{$GIA_ZABBIX_API_URL}", JSON.stringify(data));
                  
                  if (200 != request.getStatus()) {
                    result["err"] = JSON.stringify(response);
                  } else {
                    result["hostmacroid"] = JSON.parse(response)["result"][0]["hostmacroid"]
                  }
                  
                  return JSON.stringify(result);
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // ZABBIX API: UPDATE HOST MACRO
                  result = JSON.parse(value);
                  if(result.hasOwnProperty("err")) {
                   return JSON.stringify(result);
                  }
                  
                  var request = new HttpRequest();
                  request.addHeader("Content-Type: application/json-rpc");
                  var data = {
                      "jsonrpc":"2.0",
                      "method":"usermacro.update",
                      "params": JSON.parse(value),
                      "auth":"{$GIA_ZABBIX_API_TOKEN}","id":1
                  }
                  
                  var response = request.post("{$GIA_ZABBIX_API_URL}", JSON.stringify(data));
                  
                  if (200 != request.getStatus()) {
                    result["err"] = JSON.stringify(response);
                  } else {
                    result = result["value"]
                  }
                  
                  return result
          master_item:
            key: gia.get.scheduler
          tags:
            -
              tag: gia
              value: scheduler
        -
          uuid: ddf08b17e56741388417c2baf7fe5c21
          name: 'Get Involved Exam Days'
          type: DEPENDENT
          key: gia.get.involved_exam_days
          delay: '0'
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - '$.[?(@.PPECode==''{$GIA_PPE_CODE}'')]'
            -
              type: JAVASCRIPT
              parameters:
                - |
                  v = JSON.parse(value)
                  const result = {}
                  for (var i in v) {
                    var dat = v[i]["Date"]
                    var aud = v[i]["AudienceCode"]
                    if (!result.hasOwnProperty(dat)) { result[dat] = {"0000": [1,0], "7777": [1, 0]} }
                    result[dat][aud] = [Number(v[i]["Online"]), Number(v[i]["OVZ"])]
                  }
                  return JSON.stringify(result)
          master_item:
            key: gia.get.scheduler
          tags:
            -
              tag: gia
              value: service
        -
          uuid: ccb0f634854f400f93334cead18bdd12
          name: 'Get GIA Scheduler'
          type: HTTP_AGENT
          key: gia.get.scheduler
          trends: '0'
          status: DISABLED
          value_type: TEXT
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - '$.[?(@.PPECode==''{$GIA_PPE_CODE}'')]'
          timeout: 5s
          url: '{$GIA_SCHEDULER_URL}'
          tags:
            -
              tag: gia
              value: scheduler
      discovery_rules:
        -
          uuid: 5f2d919a53bb49eba6e0d6910087232a
          name: 'Discovery Examing Today'
          type: DEPENDENT
          key: avs.discovery.exam.today
          delay: '0'
          item_prototypes:
            -
              uuid: 0b585047a61d40cca3040287b4a41317
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". Pull Status (Local View) [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.cam_list.[''{#AVS_EXAM_STREAM_ID}''].pull'
              master_item:
                key: avs.monitoring.sys
              tags:
                -
                  tag: test
                  value: test
              trigger_prototypes:
                -
                  uuid: c909da5656db4cfc8545e60a6fd915fd
                  expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>"" and last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>"RUNNING"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)="" or last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)="RUNNING"'
                  name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PULL BACKOFF [EXAM]'
                  priority: DISASTER
                  tags:
                    -
                      tag: avs_stream_action
                      value: pull_del
                    -
                      tag: test
                      value: test
                    -
                      tag: tt
                      value: '{#AVS_EXAM_STREAM_ID}'
                -
                  uuid: 733e4bf81fbe4462970a005cfa212553
                  expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)=""'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>""'
                  name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PULL SWITCHEDOFF [EXAM]'
                  priority: DISASTER
                  tags:
                    -
                      tag: test
                      value: test
            -
              uuid: 1a717ff7a06141c3a8559ae6572581c8
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". Push Status (Translation) [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},push]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.cam_list.[''{#AVS_EXAM_STREAM_ID}''].push'
              master_item:
                key: avs.monitoring.sys
              tags:
                -
                  tag: test
                  value: test
              trigger_prototypes:
                -
                  uuid: 25ef2785b25846249b50387f4d317491
                  expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},push],#1)<>"" and last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},push],#1)<>"RUNNING"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},push],#1)="" or last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},push],#1)="RUNNING"'
                  name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PUSH BACKOFF [EXAM]'
                  priority: DISASTER
                  dependencies:
                    -
                      name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PULL BACKOFF [EXAM]'
                      expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>"" and last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>"RUNNING"'
                      recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)="" or last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)="RUNNING"'
                    -
                      name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PULL SWITCHEDOFF [EXAM]'
                      expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)=""'
                      recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>""'
                  tags:
                    -
                      tag: test
                      value: test
                -
                  uuid: abedc7c91c5240779ce32260e2d35517
                  expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},push],#1)=""'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},push],#1)<>""'
                  name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PUSH SWITCHEDOFF [EXAM]'
                  priority: DISASTER
                  dependencies:
                    -
                      name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PULL SWITCHEDOFF [EXAM]'
                      expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)=""'
                      recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>""'
                  tags:
                    -
                      tag: test
                      value: test
            -
              uuid: be64b22c54234dba97979fe124a4f870
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". Rec Status (Recording) [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rec]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.cam_list.[''{#AVS_EXAM_STREAM_ID}''].rec'
              master_item:
                key: avs.monitoring.sys
              tags:
                -
                  tag: test
                  value: test
              trigger_prototypes:
                -
                  uuid: b5ac329945074b6bade3001c599220bb
                  expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rec],#1)<>"" and last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rec],#1)<>"RUNNING"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rec],#1)="" or last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rec],#1)="RUNNING"'
                  name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". REC BACKOFF [EXAM]'
                  priority: DISASTER
                  dependencies:
                    -
                      name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PULL BACKOFF [EXAM]'
                      expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>"" and last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>"RUNNING"'
                      recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)="" or last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)="RUNNING"'
                    -
                      name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PULL SWITCHEDOFF [EXAM]'
                      expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)=""'
                      recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>""'
                  tags:
                    -
                      tag: test
                      value: test
                -
                  uuid: 204a11d7745d4511bafc3cd0bd430f96
                  expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rec],#1)=""'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rec],#1)<>""'
                  name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". REC SWITCHEDOFF [EXAM]'
                  priority: DISASTER
                  dependencies:
                    -
                      name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". PULL SWITCHEDOFF [EXAM]'
                      expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)=""'
                      recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},pull],#1)<>""'
                  tags:
                    -
                      tag: test
                      value: test
            -
              uuid: d804d3a9a274428ca94dbae9b1655629
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Audio Bytes. Dropped (Delta) [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.a.byte.drop.delta]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.a.byte.drop]'
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: 71f5cb1a329546a5ab1264f2798abe0f
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Audio Bytes. Dropped [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.a.byte.drop]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.results[?(@.online=="true" && @.name==''{#AVS_EXAM_STREAM_ID}'')].audio.droppedBytesCount.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: avs.monitoring.rtsp
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: 181d3634ad8f4049bb1e328001c4f1b1
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Audio Bytes. Sent (Byte Rate) [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.a.byte.sent.bitrate]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.a.byte.sent]'
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: 7053a6a45da54481b564bc18061ba2cc
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Audio Bytes. Sent [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.a.byte.sent]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.results[?(@.online=="true" && @.name==''{#AVS_EXAM_STREAM_ID}'')].audio.bytesCount.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: avs.monitoring.rtsp
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: 15dd1c7961c5427ea145b42961f7c2c5
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Audio Codec [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.acodec]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.results[?(@.online=="true" && @.name==''{#AVS_EXAM_STREAM_ID}'')].audio.codec.first()'
                  error_handler: CUSTOM_VALUE
              master_item:
                key: avs.monitoring.rtsp
              tags:
                -
                  tag: test
                  value: test
              trigger_prototypes:
                -
                  uuid: 6ea5c5267d9447eea5eeb91f40af3efc
                  expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.acodec],#1)="AUNK"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.acodec],#1)<>"AUNK"'
                  name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP AUNK [EXAM]'
                  priority: DISASTER
                  tags:
                    -
                      tag: test
                      value: test
            -
              uuid: d8f6b33ba8e34354a98dc3a54f70fe41
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Video Bytes. Dropped (Delta) [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.v.byte.drop.delta]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.v.byte.drop]'
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: 5a9d88e3e517417ca1fc4719775459f9
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Video Bytes. Dropped [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.v.byte.drop]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.results[?(@.online=="true" && @.name==''{#AVS_EXAM_STREAM_ID}'')].video.droppedBytesCount.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: avs.monitoring.rtsp
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: fd74956d36cd477681b50aeb01769496
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Video Bytes. Sent (Byte Rate) [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.v.byte.sent.bitrate]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.v.byte.sent]'
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: 3441b0a7b7794913ae762d1b77132d7f
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Video Bytes. Sent [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.v.byte.sent]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.results[?(@.online=="true" && @.name==''{#AVS_EXAM_STREAM_ID}'')].video.bytesCount.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: avs.monitoring.rtsp
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: d0c1e00978674c33a4ba2f9c21017316
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP Video Codec [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.vcodec]'
              delay: '0'
              trends: '0'
              value_type: TEXT
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.results[?(@.online=="true" && @.name==''{#AVS_EXAM_STREAM_ID}'')].video.codec.first()'
                  error_handler: CUSTOM_VALUE
              master_item:
                key: avs.monitoring.rtsp
              tags:
                -
                  tag: test
                  value: test
              trigger_prototypes:
                -
                  uuid: b0fa7f620c94437c90dd8766cc8cc903
                  expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.vcodec],#1)="VUNK"'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/AVS/exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},rtsp.vcodec],#1)<>"VUNK"'
                  name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". RTSP VUNK [EXAM]'
                  priority: DISASTER
                  tags:
                    -
                      tag: test
                      value: test
            -
              uuid: d997f5d99f0d40f6b22ab872a5814503
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". UpTime [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream.[{#AVS_EXAM_STREAM_ZBX_ID},uptime]'
              delay: '0'
              value_type: FLOAT
              units: s
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.results[?(@.online=="true" && @.name==''{#AVS_EXAM_STREAM_ID}'')].upTime.first()'
                  error_handler: CUSTOM_VALUE
                -
                  type: MULTIPLIER
                  parameters:
                    - '0.001'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: avs.monitoring.rtsp
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: a7286d4db38b473488305aea019788f7
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". Rec Status (File Write Byte Rate) [EXAM]'
              type: DEPENDENT
              key: 'exam.avs.stream[{#AVS_EXAM_STREAM_REC_PATH},rec.file.write.byterate]'
              delay: '0'
              units: B
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'vfs.dir.size[{#AVS_EXAM_STREAM_REC_PATH}]'
              tags:
                -
                  tag: test
                  value: test
            -
              uuid: ed55988e935940d4b4204ab174e15cd7
              name: 'AVS Stream ID: "{#AVS_EXAM_STREAM_ZBX_ID}". Rec Status (File Write) [EXAM]'
              key: 'vfs.dir.size[{#AVS_EXAM_STREAM_REC_PATH}]'
              units: B
              tags:
                -
                  tag: test
                  value: test
          master_item:
            key: avs.config.emit
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  // ASSIGN DISCOVERY MACROS
                  // #AVS_EXAM_STREAM_ID
                  // #AVS_EXAM_AUD_CODE
                  // #AVS_EXAM_STREAM_ZBX_ID
                  
                  var ppe_config = JSON.parse(value);
                  var result = []
                  
                  if (!ppe_config.exam_date.date_exam.length) return result
                  
                  for (var stream_id in ppe_config.streams) {
                    if (!ppe_config.streams[stream_id]["exam_dates"].hasOwnProperty(ppe_config.exam_date.date_exam[0])) continue;
                  
                    result.push({
                      "{#AVS_EXAM_STREAM_ID}":        stream_id,
                      "{#AVS_EXAM_STREAM_NAME}":      ppe_config.streams[stream_id]["avs_name"],
                      "{#AVS_EXAM_STREAM_ZBX_ID}":    ppe_config.streams[stream_id]["zbx_id"],
                      "{#AVS_EXAM_STREAM_REC_PATH}":  '{$AVS_RECFILE_PATH_BASE}' + "/" + stream_id + "/" + ppe_config.exam_date.date_exam[1]
                    })
                  }
                    
                  return JSON.stringify(result)
                  
      tags:
        -
          tag: gia
        -
          tag: software
          value: avs
      macros:
        -
          macro: '{$AVS_RECFILE_PATH_BASE}'
          value: /opt/avs/media/
        -
          macro: '{$AVS_STREAM_STATUS_BACKOFF}'
          value: BACKOFF
        -
          macro: '{$AVS_STREAM_STATUS_MISSING}'
          value: MISSING
        -
          macro: '{$AVS_STREAM_STATUS_OFF}'
          value: SWITCHEDOFF
        -
          macro: '{$AVS_STREAM_STATUS_ON}'
          value: RUNNING
        -
          macro: '{$AVS_STREAM_STATUS_STARTING}'
          value: STARTING
        -
          macro: '{$AVS_SYSTEM_USER_NAME}'
          value: monitoring
        -
          macro: '{$AVS_SYSTEM_USER_PASS}'
          value: Vjybnjhbyu
        -
          macro: '{$AVS_URL_MONITORING_PULL}'
          value: 'http://monitoring:Vjybnjhbyu@localhost/monitoring/pull'
        -
          macro: '{$AVS_URL_MONITORING_PULL_DEL}'
          value: 'http://monitoring:Vjybnjhbyu@localhost/monitoring/pull/del'
        -
          macro: '{$AVS_URL_MONITORING_REC}'
          value: 'http://monitoring:Vjybnjhbyu@localhost/monitoring/rec'
        -
          macro: '{$AVS_URL_MONITORING_REC_DEL}'
          value: 'http://monitoring:Vjybnjhbyu@localhost/monitoring/rec/del'
        -
          macro: '{$AVS_URL_MONITORING_RTSP}'
          value: 'http://monitoring:Vjybnjhbyu@localhost/monitoring/rtsp'
        -
          macro: '{$AVS_URL_MONITORING_SYS}'
          value: 'http://monitoring:Vjybnjhbyu@localhost/monitoring/sys'
        -
          macro: '{$GIA_SCHEDULER_URL}'
          value: 'http://11.103.8.101:8080/api/calendar/all'
        -
          macro: '{$GIA_ZABBIX_API_TOKEN}'
          value: 999e778c92f3b4a7a6f23630fe32840aebf77cfd2fa299ae14a9be10870605bd
        -
          macro: '{$GIA_ZABBIX_API_URL}'
          value: 'http://11.103.8.101:62929/api_jsonrpc.php'
        -
          macro: '{$TESTEST}'
          value: '1234_5678_0_94'
